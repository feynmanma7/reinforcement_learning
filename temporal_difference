import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm

'''
up-left is (0, 0)

0 0 0 0 0
0 0 0 0 0 
0 0 0 0 0
s c c c goal

s for start
c for cliff

The right-most col is neighbor to cliff.

The reward of each move if -1, otherwise -100 if fall down the cliff.

'''
class CliffWalkingEnv:
    def __init__(self, ncol=12, nrow=4) -> None:
        self.nrow = nrow
        self.ncol = ncol
        self.x = 0
        self.y = self.nrow - 1

    def step(self, action):
        # change:
        # 0 for up
        # 1 for down
        # 2 for left
        # 3 for right

        change = [[0, -1], [0, 1], [-1, 0], [1, 0]]
        self.x = min(max(0, self.x + change[action][0]), self.ncol - 1)
        self.y = min(max(0, self.y + change[action][1]), self.nrow - 1)

        reward = -1
        next_state = self.y * self.ncol + self.x
        done = False

        if self.y == self.nrow - 1 and self.x > 0:
            # Start from (0, n_row - 1), then turn right, 
            # fall down the cliff or the end.
            done = True
            if self.x != self.ncol - 1:
                # Not the end, fall down the cliff
                reward = -100
        
        return next_state, reward, done
    
    def reset(self):
        self.x = 0
        self.y = self.nrow - 1
        return self.y * self.ncol + self.x


class Sarsa:    
    def __init__(self, ncol, nrow, epsilon, alpha, gamma, n_action=4) -> None:
        self.Q_table = np.zeros([nrow * ncol, n_action])
        self.n_action = n_action
        self.alpha = alpha  # learning rate
        self.gamma = gamma  # discounting rate
        self.epsilon = epsilon  # for greedy strategy

    def take_action(self, state):
        if np.random.random() < self.epsilon:
            action = np.random.randint(self.n_action)
        else:
            action = np.argmax(self.Q_table[state])
        return action
    
    def best_action(self, state):
        Q_max = np.max(self.Q_table[state])

        # action list, 1 for max_Q in current state.
        a = [0 for _ in range(self.n_action)]
        for i in range(self.n_action):
            if self.Q_table[state, i] == Q_max:
                a[i] = 1
        return a
    
    def update(self, s0, a0, r, s1, a1):
        td_error = r + self.gamma * self.Q_table[s1, a1] - self.Q_table[s0, a0]
        self.Q_table[s0, a0] += self.alpha * td_error


class QLearning():
    def __init__(self, ncol, nrow, epsilon, alpha, gamma, n_action=4) -> None:
        self.Q_table = np.zeros([nrow * ncol, n_action])
        self.n_action = n_action
        self.alpha = alpha  # learning rate
        self.gamma = gamma  # discounting rate
        self.epsilon = epsilon  # for greedy strategy

    def take_action(self, state):
        if np.random.random() < self.epsilon:
            action = np.random.randint(self.n_action)
        else:
            action = np.argmax(self.Q_table[state])
        return action
    
    def best_action(self, state):
        Q_max = np.max(self.Q_table[state])

        # action list, 1 for max_Q in current state.
        a = [0 for _ in range(self.n_action)]
        for i in range(self.n_action):
            if self.Q_table[state, i] == Q_max:
                a[i] = 1
        return a
    
    def update(self, s0, a0, r, s1):
        # Sarsa
        # td_error = r + self.gamma * self.Q_table[s1, a1] - self.Q_table[s0, a0]

        # Q-learning
        td_error = r + self.gamma * self.Q_table[s1].max() - self.Q_table[s0, a0]

        self.Q_table[s0, a0] += self.alpha * td_error



def print_agent(agent, env, action_meaning, disaster=[], end=[]):
    for i in range(env.nrow):
        for j in range(env.ncol):
            if (i * env.ncol + j) in disaster:
                print('****', end=' ')
            elif (i * env.ncol + j) in end:
                print('EEEE', end=' ')
            else:
                a = agent.best_action(i * env.ncol + j)
                pi_str = ''
                for k in range(len(action_meaning)):
                    pi_str += action_meaning[k] if a[k] > 0 else 'o'
                print(pi_str, end=' ')
        print()

def test_sarsa():
    ncol = 12
    nrow = 4
    env = CliffWalkingEnv(ncol=ncol, nrow=nrow)
    np.random.seed(0)
    epsilon = 0.1
    alpha = 0.1
    gamma = 0.9
    agent = Sarsa(ncol=ncol, nrow=nrow, epsilon=epsilon, alpha=alpha, gamma=gamma)
    num_episodes = 500

    return_list = []
    for i in range(10):
        with tqdm(total = int(num_episodes / 10), desc = 'Iteration %d' % i) as pbar:
            for i_episode in range(int(num_episodes / 10)):
                episode_return = 0
                state = env.reset()
                action = agent.take_action(state)
                done = False

                while not done:
                    next_state, reward, done = env.step(action=action)
                    next_action = agent.take_action(next_state)
                    episode_return += reward
                    agent.update(state, action, reward, next_state, next_action)
                    state, action = next_state, next_action
                return_list.append(episode_return)

                if (i_episode + 1) % 10 == 0:
                    pbar.set_postfix({
                        'epiode': 
                        '%d' % (num_episodes / 10 * i + i_episode + 1),
                        'return':
                        '%.3f' % np.mean(return_list[-10:])
                    })
                pbar.update(1)

    episodes_list = list(range(len(return_list)))
    plt.plot(episodes_list, return_list)
    plt.xlabel('Episodes')
    plt.ylabel('Returns')
    plt.title('Sarsa on {}'.format('Cliff Walking'))
    plt.show()

    action_meaning = ['^', 'v', '<', '>']
    print('Sarsa算法最终收敛得到的策略为：')
    print_agent(agent, env, action_meaning, list(range(37, 47)), [47])

def test_Qlearning():
    ncol = 12
    nrow = 4
    env = CliffWalkingEnv(ncol=ncol, nrow=nrow)

    np.random.seed(0)
    epsilon = 0.1
    alpha = 0.1
    gamma = 0.9
    agent = QLearning(ncol, nrow, epsilon, alpha, gamma)
    num_episodes = 500  # 智能体在环境中运行的序列的数量

    return_list = []  # 记录每一条序列的回报
    for i in range(10):  # 显示10个进度条
        # tqdm的进度条功能
        with tqdm(total=int(num_episodes / 10), desc='Iteration %d' % i) as pbar:
            for i_episode in range(int(num_episodes / 10)):  # 每个进度条的序列数
                episode_return = 0
                state = env.reset()
                done = False
                while not done:
                    action = agent.take_action(state)
                    next_state, reward, done = env.step(action)
                    episode_return += reward  # 这里回报的计算不进行折扣因子衰减
                    agent.update(state, action, reward, next_state)
                    state = next_state
                return_list.append(episode_return)
                if (i_episode + 1) % 10 == 0:  # 每10条序列打印一下这10条序列的平均回报
                    pbar.set_postfix({
                        'episode':
                        '%d' % (num_episodes / 10 * i + i_episode + 1),
                        'return':
                        '%.3f' % np.mean(return_list[-10:])
                    })
                pbar.update(1)

    episodes_list = list(range(len(return_list)))
    plt.plot(episodes_list, return_list)
    plt.xlabel('Episodes')
    plt.ylabel('Returns')
    plt.title('Q-learning on {}'.format('Cliff Walking'))
    plt.show()

    action_meaning = ['^', 'v', '<', '>']
    print('Q-learning算法最终收敛得到的策略为：')
    print_agent(agent, env, action_meaning, list(range(37, 47)), [47])

test_sarsa()
test_Qlearning()
